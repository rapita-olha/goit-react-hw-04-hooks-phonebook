{"version":3,"sources":["components/Container/Container.module.css","components/Container/Container.js","components/Filter/Filter.js","components/ContactsListItem/ContactsListitem.js","components/ContactsForm/ContactsForm.js","components/ContactsList/ContactsList.js","App.js","hooks/useLokalStorage.js","utils/filter-contacts.js","index.js"],"names":["module","exports","Container","children","className","s","container","Label","styled","label","Input","input","Filter","value","onChange","type","name","Button","button","P","p","ContactsListItem","onClick","contact","number","Form","form","GreenButton","ContactsForm","onSubmit","useState","setName","setNumber","handleStateChange","currentTarget","e","preventDefault","pattern","title","required","Ul","ul","Li","li","ContactsList","contacts","sort","contactA","contactB","localeCompare","map","id","H1","h1","H2","h2","Div","div","App","key","defaultValue","JSON","parse","localStorage","getItem","state","setState","useEffect","setItem","stringify","useLocalStorage","setContacts","filter","setFilter","filteredContacts","length","toLowerCase","includes","trim","filterContacts","some","alert","prevState","nanoid","contactNumber","newState","ReactDOM","render","document","querySelector","StrictMode","getElementById"],"mappings":"8IACAA,EAAOC,QAAU,CAAC,UAAY,+B,iKCCf,SAASC,EAAT,GAAkC,IAAbC,EAAY,EAAZA,SAClC,OAAO,qBAAKC,UAAWC,IAAEC,UAAlB,SAA8BH,ICAvC,I,IAAMI,EAAQC,IAAOC,MAAV,sIAOLC,EAAQF,IAAOG,MAAV,4MAUX,SAASC,EAAT,GAAsC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvB,OACE,eAACP,EAAD,mCAEE,cAACG,EAAD,CAAOK,KAAK,OAAOC,KAAK,SAASH,MAAOA,EAAOC,SAAUA,OCrB/D,I,IAAMG,EAAST,IAAOU,OAAV,mXAeNC,EAAIX,IAAOY,EAAV,gDAIP,SAASC,EAAT,GAAmE,IAAvCC,EAAsC,EAAtCA,QAAsC,IAA7BC,QAAWP,EAAkB,EAAlBA,KAAMQ,EAAY,EAAZA,OAKpD,OACE,qCACE,eAACL,EAAD,WACGH,EADH,KACWQ,KAEX,cAACP,EAAD,CAAQF,KAAK,SAASO,QATN,WAClBA,EAAQE,IAQN,uBC1BN,IAAMC,EAAOjB,IAAOkB,KAAV,yOAYJC,EAAcnB,YAAOS,EAAPT,CAAH,sKA2EFoB,I,IAAAA,EAhEf,YAAqC,IAAbC,EAAY,EAAZA,SACtB,EAAwBC,mBAAS,IAAjC,mBAAOd,EAAP,KAAae,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAON,EAAP,KAAeQ,EAAf,KAEMC,EAAoB,SAAC,GAAwC,IAAD,IAArCC,cAAiBlB,EAAoB,EAApBA,KAAMH,EAAc,EAAdA,MAClD,OAAQG,GACN,IAAK,OACHe,EAAQlB,GACR,MAEF,IAAK,SACHmB,EAAUnB,KAkBhB,OACE,eAACY,EAAD,CAAMI,SAPa,SAAAM,GACnBA,EAAEC,iBACFP,EAASb,EAAMQ,GANfQ,EAAU,IACVD,EAAQ,KAUR,UACE,eAACxB,EAAD,kBAEE,cAACG,EAAD,CACEK,KAAK,OACLC,KAAK,OACLqB,QAAQ,yHACRC,MAAM,kcACNxB,SAAUmB,EACVpB,MAAOG,EACPuB,UAAQ,OAGZ,eAAChC,EAAD,oBAEE,cAACG,EAAD,CACEK,KAAK,MACLC,KAAK,SACLqB,QAAQ,yFACRC,MAAM,giBACNxB,SAAUmB,EACVpB,MAAOW,EACPe,UAAQ,OAGZ,cAACZ,EAAD,CAAaZ,KAAK,SAAlB,6BC/EAyB,EAAKhC,IAAOiC,GAAV,iHAOFC,EAAKlC,IAAOmC,GAAV,mFAiCOC,I,MAAAA,EA3Bf,YAA8C,IAAtBC,EAAqB,EAArBA,SAAUvB,EAAW,EAAXA,QAChC,OACE,cAACkB,EAAD,UACG,YAAIK,GACFC,MAAK,SAACC,EAAUC,GAAX,OACJD,EAAS/B,KAAKiC,cAAcD,EAAShC,SAEtCkC,KAAI,SAAA3B,GAAO,OACV,cAACmB,EAAD,UACE,cAACrB,EAAD,CAAkBE,QAASA,EAASD,QAASA,KADtCC,EAAQ4B,UCf3B,IAAMC,EAAK5C,IAAO6C,GAAV,+FAMFC,EAAK9C,IAAO+C,GAAV,+FAMFC,EAAMhD,IAAOiD,IAAV,iGA+DMC,MA1Df,WACE,MC3Ba,SAAyBC,EAAKC,GAC3C,MAA0B9B,oBAAS,WAAO,IAAD,EACvC,iBAAO+B,KAAKC,MAAMC,aAAaC,QAAQL,WAAvC,QAAgDC,KADlD,mBAAOK,EAAP,KAAcC,EAAd,KAQA,OAJAC,qBAAU,WACRJ,aAAaK,QAAQT,EAAKE,KAAKQ,UAAUJ,MACxC,CAACN,EAAKM,IAEF,CAACA,EAAOC,GDkBiBI,CAAgB,WAAY,IAA5D,mBAAOzB,EAAP,KAAiB0B,EAAjB,KACA,EAA4BzC,mBAAS,IAArC,mBAAO0C,EAAP,KAAeC,EAAf,KA+BMC,EE7DO,SAAwB7B,EAAUhC,GAC/C,OAAOgC,EAAS8B,OAAS,EACrB9B,EAAS2B,QAAO,SAAAjD,GAAO,OACrBA,EAAQP,KAAK4D,cAAcC,SAAShE,EAAMiE,OAAOF,kBAEnD,KFwDqBG,CAAelC,EAAU2B,GAElD,OACE,eAACtE,EAAD,WACE,cAACkD,EAAD,wBACA,cAAC,EAAD,CAAcvB,SAlCO,SAACb,EAAMQ,GACJqB,EAASmC,MACjC,SAAAzD,GAAO,OAAIA,EAAQP,OAASA,GAAQO,EAAQC,SAAWA,KAGvDyD,MAAM,GAAD,OAAIjE,EAAJ,4BAIPuD,GAAY,SAAAW,GAAS,4BAChBA,GADgB,CAEnB,CACE/B,GAAIgC,cACJnE,OACAQ,kBAqBF,eAACgC,EAAD,WACE,cAACF,EAAD,uBACA,cAAC1C,EAAD,CACEC,MAAO2D,EACP1D,SAAU,YAAmC,IAAfD,EAAc,EAA/BqB,cAAiBrB,MAC5B4D,EAAU5D,MAGb6D,GACC,cAAC,EAAD,CACE7B,SAAU6B,EACVpD,QA3BkB,SAAA8D,GAC1Bb,GAAY,SAAAW,GACV,IAAMG,EAAWH,EAAUV,QACzB,SAAAjD,GAAO,OAAI6D,IAAkB7D,EAAQC,UAEvC,OAAO,YAAI6D,MAEbZ,EAAU,c,MGrDda,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,UAEhDH,IAASC,OACP,cAAC,IAAMG,WAAP,UACE,cAAC,EAAD,MAEFF,SAASG,eAAe,W","file":"static/js/main.35a84d4b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__2ZMRl\"};","import s from 'components/Container/Container.module.css';\n\nexport default function Container({ children }) {\n  return <div className={s.container}>{children}</div>;\n}\n","import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Label = styled.label`\n  display: flex;\n  align-items: center;\n  margin-bottom: 35px;\n  font-size: 25px;\n  cursor: pointer;\n`;\nconst Input = styled.input`\n  max-width: 200px;\n  height: 10px;\n  margin-left: 30px;\n  padding: 20px 10px;\n  background: #bebebe;\n  color: #036103;\n  border: 2px solid red;\n  border-radius: 10px;\n`;\nfunction Filter({ value, onChange }) {\n  return (\n    <Label>\n      Find contacts by name\n      <Input type=\"text\" name=\"filter\" value={value} onChange={onChange} />\n    </Label>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport { Filter, Input, Label };\n","import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Button = styled.button`\n  padding: 5px 10px;\n  width: 100px;\n  margin-top: 10px;\n  background-color: #ff1414;\n  color: black;\n  border-radius: 5px;\n  transition: background-color 200ms linear, color 500ms linear;\n  &:hover,\n  &:focus {\n    background-color: #c9baba;\n    color: red;\n    transition: background-color 200ms linear, color 500ms linear;\n  }\n`;\nconst P = styled.p`\n  font-size: 25px;\n`;\n\nfunction ContactsListItem({ onClick, contact: { name, number } }) {\n  const handleClick = () => {\n    onClick(number);\n  };\n\n  return (\n    <>\n      <P>\n        {name}: {number}\n      </P>\n      <Button type=\"button\" onClick={handleClick}>\n        delete\n      </Button>\n    </>\n  );\n}\n\nContactsListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport { ContactsListItem, Button };\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Input, Label } from 'components/Filter';\nimport { Button } from 'components/ContactsListItem';\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  max-width: 600px;\n  margin: 0 auto;\n  margin-bottom: 40px;\n  padding: 20px 70px;\n  border: 2px solid red;\n  border-radius: 10px;\n  background: orange;\n`;\n\nconst GreenButton = styled(Button)`\n  background-color: #278a27;\n  margin: 0 auto;\n  margin-top: 10px;\n  width: 150px;\n  &:hover,\n  &:focus {\n    color: #006900;\n  }\n`;\n\nfunction ContactsForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleStateChange = ({ currentTarget: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const resetFields = () => {\n    setNumber('');\n    setName('');\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(name, number);\n    resetFields();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label>\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          onChange={handleStateChange}\n          value={name}\n          required\n        />\n      </Label>\n      <Label>\n        Number\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          onChange={handleStateChange}\n          value={number}\n          required\n        />\n      </Label>\n      <GreenButton type=\"submit\">Add contact</GreenButton>\n    </Form>\n  );\n}\n\nContactsForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default ContactsForm;\n","import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport { ContactsListItem } from 'components/ContactsListItem';\n\nconst Ul = styled.ul`\n  list-style: none;\n  text-align: center;\n  color: #722317;\n  font-weight: bold;\n`;\n\nconst Li = styled.li`\n  &:not(:last-child) {\n    margin-bottom: 25px;\n  }\n`;\n\nfunction ContactsList({ contacts, onClick }) {\n  return (\n    <Ul>\n      {[...contacts]\n        .sort((contactA, contactB) =>\n          contactA.name.localeCompare(contactB.name),\n        )\n        .map(contact => (\n          <Li key={contact.id}>\n            <ContactsListItem contact={contact} onClick={onClick} />\n          </Li>\n        ))}\n    </Ul>\n  );\n}\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default ContactsList;\n","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport styled from 'styled-components';\n\nimport Container from './components/Container';\nimport ContactsForm from './components/ContactsForm';\nimport ContactsList from './components/ContactsList';\nimport { Filter } from './components/Filter';\nimport filterContacts from 'utils/filter-contacts';\nimport useLocalStorage from './hooks/useLokalStorage';\n\nconst H1 = styled.h1`\n  margin-bottom: 40px;\n  font-size: 40px;\n  text-align: center;\n`;\n\nconst H2 = styled.h2`\n  margin-bottom: 20px;\n  text-align: center;\n  font-size: 35px;\n`;\n\nconst Div = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\nfunction App() {\n  const [contacts, setContacts] = useLocalStorage('contacts', []);\n  const [filter, setFilter] = useState('');\n\n  const handleContactAdd = (name, number) => {\n    const isContactExisting = contacts.some(\n      contact => contact.name === name || contact.number === number,\n    );\n    if (isContactExisting) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    setContacts(prevState => [\n      ...prevState,\n      {\n        id: nanoid(),\n        name,\n        number,\n      },\n    ]);\n  };\n\n  const handleContactDelete = contactNumber => {\n    setContacts(prevState => {\n      const newState = prevState.filter(\n        contact => contactNumber !== contact.number,\n      );\n      return [...newState];\n    });\n    setFilter('');\n  };\n\n  const filteredContacts = filterContacts(contacts, filter);\n\n  return (\n    <Container>\n      <H1>Phonebook</H1>\n      <ContactsForm onSubmit={handleContactAdd} />\n      <Div>\n        <H2>Contacts</H2>\n        <Filter\n          value={filter}\n          onChange={({ currentTarget: { value } }) => {\n            setFilter(value);\n          }}\n        />\n        {filteredContacts && (\n          <ContactsList\n            contacts={filteredContacts}\n            onClick={handleContactDelete}\n          />\n        )}\n      </Div>\n    </Container>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from 'react';\r\n\r\nexport default function useLocalStorage(key, defaultValue) {\r\n  const [state, setState] = useState(() => {\r\n    return JSON.parse(localStorage.getItem(key)) ?? defaultValue;\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(key, JSON.stringify(state));\r\n  }, [key, state]);\r\n\r\n  return [state, setState];\r\n}\r\n","export default function filterContacts(contacts, value) {\r\n  return contacts.length > 0\r\n    ? contacts.filter(contact =>\r\n        contact.name.toLowerCase().includes(value.trim().toLowerCase()),\r\n      )\r\n    : null;\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}